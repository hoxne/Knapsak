public class Perspective{


	/**
	@param dataPoints matrix containing (x,y,z) information in the rows
	@param centerOfProjection array containing (x,y,x) coordinates for the center of projection
	*/

	public double[][] coordinatesFor2D(double [][]dataP, double[] centerOfProjection){

		double b=centerOfProjection[0]; 
		double c = centerOfProjection[1];
		double d = centerOfProjection[2];
		double [][] matrixP = {{1,0, -b/d, 0}, {0,1,-c/d,0}, {0,0,0,0}, {0,0, -1/d,1}};

		double [][] dataPoints0 = createMatrixD(getTranspose(dataP));

		double [][] dataPoints = getXandY2D(matrixMultiplication(matrixP, dataPoints0));

		return dataPoints;

	}

	public static double[][] matrixMultiplication(double[][] matrixA, double [][] matrixB){

		double [][] temp = new double [matrixA.length][matrixB[0].length];

    	int sum=0;
    	for (int i = 0; i<matrixA.length; i++) {
    		for (int j = 0; j<matrixB[0].length ; j++) {
    			for (int x = 0; x<matrixA[0].length ; x++) {
    				temp[i][j]+=matrixA[i][x]*matrixB[x][j];
    			}
    		}
    	}
    	return temp;
	}

	/**
	divides the top 3 entries in each column with the corresponding 4-th entry
	Discard the third and the fourth row
	@param matrix
	@return the new matrix after perfoming the above explained actions
	*/

	public static double[][] getXandY2D(double[][] matrix){

		double [][] temp0 = new double [matrix.length][matrix[0].length];

		for(int i=0; i<matrix.length-1; i++){
			for(int j=0; j<matrix[0].length; j++){
				temp0 [i][j] = matrix[i][j]/matrix[matrix.length-1][j];
			}
		}

		double[][] temp = new double[2][matrix[0].length];
		for(int i=0; i<2; i++){
			for(int j=0; j<matrix[0].length; j++){
				temp[i][j] = temp0[i][j];
			}
		}

		return temp;
	}

	public static double[][] getTranspose(double [][] matrix){
		double [][] temp = new double [matrix[0].length][matrix.length];

		for(int i=0; i<matrix.length; i++){
			for(int j =0; j<matrix[0].length; j++){
				temp[j][i] = matrix[i][j];
			}
		}
		return temp;
	}

	/**
	adds a row containing 1 to the datapoint matrix
	*/

	public static double[][] createMatrixD(double [][] matrix){

		double [][] temp = new double [matrix.length+1][matrix[0].length];
		for(int i=0; i<temp.length; i++){
			for(int j=0; j<temp[0].length; j++){
				if(i!=matrix.length){
					temp[i][j]=matrix[i][j];
				}
				else temp[i][j]=1;
			}
		}
		return temp;
	}

}
